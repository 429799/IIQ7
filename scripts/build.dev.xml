<?xml version="1.0" encoding="UTF-8"?>
<project name="dev">

    <!--
    **********************************************************
    Targets to make your dev life easier
    **********************************************************
     -->
    <condition property="is-windows">
		<os family="windows" />
	</condition>

	<condition property='is-linux'>
		<os family='unix' name='Linux' />
	</condition>

    <macrodef name="iiq.sql">
        <attribute name="sql.file"/>
        <sequential>
            <!--<echo>Executing @{sql.file}</echo>-->
            <sql
                    driver="${db.driver}"
                    url="${db.url}"
                    userid="${db.userid}"
                    password="${db.password}"
                    src="@{sql.file}"
                    print="yes"
                    keepformat="true"
                    escapeprocessing="false"
                    expandproperties="false"
                    >
                <classpath>
                    <pathelement path="${classpath}"/>
                    <fileset dir="${build.iiqBinaryExtract}/WEB-INF/lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </sql>
            <!-- Other interesting sql params
                 showwarnings="true"
                  autocommit="true"
            -->
        </sequential>
    </macrodef>

    <macrodef name="iiq.sql.upgrade">
        <attribute name="sql.file"/>
        <sequential>
            <!--<echo>Executing @{sql.file}</echo>-->
            <sql
                    driver="${db.driver}"
                    url="${db.url}"
                    userid="${db.userid}"
                    password="${db.password}"
                    src="@{sql.file}"
                    print="yes"
                    keepformat="true"
                    escapeprocessing="false"
                    expandproperties="false"
                    onerror="continue"
                    autocommit="true"

                    >
                <classpath>
                    <pathelement path="${classpath}"/>
                    <fileset dir="${build.iiqBinaryExtract}/WEB-INF/lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </sql>
            <!-- Other interesting sql params
                 showwarnings="true"
                  autocommit="true"
            -->
        </sequential>
    </macrodef>


    <macrodef name="iiq.start.stop">
        <attribute name="action"/>
        <sequential>
            <if>
                <equals arg1="@{action}" arg2="stop"/>
                <then>
                    <if>
                        <isset property="is-windows"/>
                        <then>
                            <echo>Shutting down app server..</echo>
                            <exec executable="cmd.exe">
                                <env key="CATALINA_HOME" path="${tomcat.home}"/>
                                <arg value="/c"/>
                                <arg value="${application.server.stop}"/>
                            </exec>
                        </then>
                        <else>
                            <exec executable="${application.server.stop}">
                                <!--<arg value="/c"/>-->
                            </exec>
                        </else>
                    </if>
                </then>
                <else>
                    <if>
                        <isset property="is-windows"/>
                        <then>
                            <echo>Starting app server..</echo>
                            <exec executable="cmd.exe">
                                <env key="CATALINA_HOME" path="${tomcat.home}"/>
                                <!-- trys to start the app server in debug mode -->
                                <!--<env key="JAVA_OPTS" value="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"/>-->
                                <arg value="/c"/>
                                <arg value="${application.server.start}"/>
                                <!--<arg value="run"/>-->
                            </exec>
                            <waitfor>
                                <and>
                                    <socket server="${application.server.host}" port="${application.server.port}"/>
                                    <http url="http://${application.server.host}:${application.server.port}/${iiq.path}"/>
                                </and>
                            </waitfor>
                        </then>
                        <else>
                            <exec executable="${application.server.start}">
                                <!--<arg value="/c"/>-->
                            </exec>
                        </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

    <target name="up" depends="init-properties">
        <iiq.start.stop action="start"/>
    </target>

    <target name="down" depends="init-properties">
        <iiq.start.stop action="stop"/>
    </target>

    <!-- propose we refactor to split this giant up -->
    <target name="createdb" depends="init-properties" description="creates the iiq tables for the specified product version, takes patch level into account">
        <copy overwrite="true" file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}"
              tofile="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"/>

        <!-- Start oracle section -->
        <!-- For Oracle, we need to option to create the tablespace and user, which is commented out in the DB scripts-->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
                <isset property="db.oracle.createTableSpace"/>
                <equals arg1="${db.oracle.createTableSpace}" arg2="true"/>
                <isset property="db.oracle.tableSpacePath"/>
                <isset property="db.oracle.tableSpaceName"/>
            </and>                
            <then>
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- CREATE BIGFILE TABLESPACE identityiq_ts"
                    value="CREATE BIGFILE TABLESPACE ${db.oracle.tableSpaceName}"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- DATAFILE '/usr/local/oradata/identityiq.dbf' SIZE 1G"
                    value="DATAFILE '${db.oracle.tableSpacePath}' SIZE 1G"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="--    AUTOEXTEND ON NEXT 512M MAXSIZE UNLIMITED"
                    value="AUTOEXTEND ON NEXT 512M MAXSIZE UNLIMITED"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="--    EXTENT MANAGEMENT LOCAL;"
                    value="EXTENT MANAGEMENT LOCAL;"
                />
            </then>
        </if>        

        <!-- For Oracle, we need the option to create the DB user, which is normally commented out in the OOTB script-->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
                <isset property="db.oracle.createUser"/>
                <equals arg1="${db.oracle.createUser}" arg2="true"/>
                <isset property="db.name"/>
                <isset property="db.userPassword"/>
                <isset property="db.oracle.tableSpaceName"/>
            </and>                
            <then>
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- CREATE USER identityiq IDENTIFIED BY identityiq"
                    value="CREATE USER ${db.name} IDENTIFIED BY ${db.userPassword}"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="--     DEFAULT TABLESPACE identityiq_ts"
                    value="DEFAULT TABLESPACE ${db.oracle.tableSpaceName}"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="--     QUOTA UNLIMITED ON identityiq_ts;"
                    value="QUOTA UNLIMITED ON ${db.oracle.tableSpaceName};"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- GRANT CREATE SESSION to identityiq;"
                    value="GRANT CREATE SESSION to ${db.name};"
                />
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- GRANT CREATE TABLE to identityiq;"
                    value="GRANT CREATE TABLE to ${db.name};"
                />
                <!-- if we are using JavaMelody, we need the following line to gather SQL statistics in Oracle -->
                <if>
                    <and>
                        <isset property="installJavaMelody"/>
                        <equals arg1="${installJavaMelody}" arg2="true"/>
                    </and>
                    <then>
                        <concat destfile="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced" append="true">GRANT SELECT ANY DICTIONARY to ${db.name};
                        </concat>
                    </then>
                </if>
            </then>
        </if>
        <!-- end oracle section -->

        <!-- start mysql section -->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="mysql"/>
            </and>
            <then>
                <!-- # First swap out the passwords:-->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="BY 'identityiq'"
                    value="BY '${db.userPassword}'"
                />
                <!-- # Next swap out the USE statement: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="USE identityiq;"
                    value="USE ${db.name};"
                />
                <!-- # Next swap database create statement: -->                
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="EXISTS identityiq"
                    value="EXISTS ${db.name}"
                />
                <!-- # Next swap out the permissions statements: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="TO 'identityiq'"
                    value="TO '${db.userName}'"
                />
            </then>
        </if>
        <!-- end mysql section -->

        <!-- Start sqlserver section -->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="sqlserver"/>
            </and>
            <then>
                <!-- Swap database create statement: -->                
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="DATABASE identityiq"
                    value="DATABASE ${db.name}"
                />
                <!-- Swap out the db login name:-->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="[identityiq]"
                    value="[${db.sqlserver.loginName}]"
                />                
                <!-- Swap out the passwords:-->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="PASSWORD='identityiq'"
                    value="PASSWORD='${db.userPassword}'"
                />
                <!-- Swap out the default db:-->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="DEFAULT_DATABASE=identityiq"
                    value="DEFAULT_DATABASE=${db.name}"
                />
                <!-- # Next swap out the USE statement: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="USE identityiq"
                    value="USE ${db.name}"
                />
                <!-- # Next swap out the CREATE USER statement: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE USER identityiq FOR LOGIN identityiq WITH DEFAULT_SCHEMA ="
                    value="CREATE USER ${db.userName} FOR LOGIN ${db.sqlserver.loginName} WITH DEFAULT_SCHEMA ="
                />
                <replaceregexp
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    match="identityiq${line.separator}"
                    replace="${db.name}${line.separator}"
                />
                <!-- Next swap the schema create statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE SCHEMA identityiq AUTHORIZATION identityiq"
                    value="CREATE SCHEMA ${db.name} AUTHORIZATION ${db.userName}"
                />
                <!-- # Next swap out the permissions statements: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="to identityiq"
                    value="to ${db.userName}"
                />
                <!-- # Finally swap out the EXEC statement: -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="EXEC sp_addrolemember 'db_owner', 'identityiq'"
                    value="EXEC sp_addrolemember 'db_owner', '${db.userName}'"
                />
            </then>
            <!-- end sqlserver section -->
        </if>

        <!-- Start db2 section -->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="db2"/>
            </and>
            <then>
                <!-- swap the db create statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE DATABASE IIQ"
                    value="CREATE DATABASE ${db.db2.databaseName}"
                />
                <!-- swap the connect statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CONNECT TO iiq;"
                    value="CONNECT TO ${db.db2.databaseName};"
                />
                <!-- swap the schema statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE SCHEMA identityiq AUTHORIZATION identityiq;"
                    value="CREATE SCHEMA ${db.userName} AUTHORIZATION ${db.userPassword};"
                />
                <!-- swap the bufferpool statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE BUFFERPOOL identityiq_bp"
                    value="CREATE BUFFERPOOL ${db.db2.bufferpool}"
                />
                <!-- swap the tablespace statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="CREATE TABLESPACE identityiq_ts"
                    value="CREATE TABLESPACE ${db.db2.tableSpaceName}"
                />
                <!-- switch the referal in the tablespace statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="BUFFERPOOL identityiq_bp;"
                    value="BUFFERPOOL ${db.db2.bufferpool};"
                />
                <!-- switch the permission statement -->
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="GRANT DBADM ON DATABASE TO USER identityiq;"
                    value="GRANT DBADM ON DATABASE TO USER ${db.userName};"
                />
            </then>
        </if>
        <!-- end db2 section -->

        <!-- Replacing ootb behavior to remove chance of multiple incorrect substitution. These will only swap out the table and index prefixes -->
        <replace file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced" casesensitive="false"
                 token=" identityiq." value=" ${db.name}."/>
        <iiq.sql sql.file="${build.iiqBinaryExtract}/WEB-INF/database/create_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"/>
        <antcall target="import-stock"/>
        <if>
            <and>
                <isset property="IIQPatchLevel"/>
                <length string="${IIQPatchLevel}" when="greater" length="1"/>
            </and>
            <then>
                <copy overwrite="true" file="${build.iiqBinaryExtract}/WEB-INF/database/upgrade_identityiq_tables-${IIQVersion}${IIQPatchLevel}.${db.type}"
                      tofile="${build.iiqBinaryExtract}/WEB-INF/database/upgrade_identityiq_tables-${IIQVersion}${IIQPatchLevel}.${db.type}.tokenReplaced"/>
                <replace file="${build.iiqBinaryExtract}/WEB-INF/database/upgrade_identityiq_tables-${IIQVersion}${IIQPatchLevel}.${db.type}.tokenReplaced" casesensitive="false"
                         token="identityiq" value="${db.name}"/>
                <!-- fix trailing white space which causes syntax errors -->
                <replaceregexp
                        file="${build.iiqBinaryExtract}/WEB-INF/database/upgrade_identityiq_tables-${IIQVersion}${IIQPatchLevel}.${db.type}.tokenReplaced"
                        match="\s*$"
                        replace=""
                        byline="true"
                        />
                <iiq.sql.upgrade
                        sql.file="${build.iiqBinaryExtract}/WEB-INF/database/upgrade_identityiq_tables-${IIQVersion}${IIQPatchLevel}.${db.type}.tokenReplaced"/>
                <antcall target="runUpgrade"/>

            </then>
        </if>
    </target>

    <!-- Propose we refactor this to split the DB types. Not enough overlap to make this giant piece worth it -->
    <target name="dropdb"  depends="init-properties" description="drops the database and iiq user">
        <if>
            <equals arg1="${override.safety.prompts}" arg2="false"/>
            <then>
                <input
                        message="Are you sure you want to drop your db and all of your data? continue (y/n)?"
                        validargs="y,n"
                        addproperty="do.delete"
                        />
                <condition property="do.abort">
                    <equals arg1="n" arg2="${do.delete}"/>
                </condition>
                <fail if="do.abort">Build aborted by user.</fail>
            </then>
        </if>
        <copy overwrite="true" file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}"
              tofile="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"/>

        <!-- For Oracle, if we are creating the tablespace, we should remove it. That requires uncommenting and substitution -->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
                <isset property="db.oracle.createTableSpace"/>
                <equals arg1="${db.oracle.createTableSpace}" arg2="true"/>
                <isset property="db.oracle.tableSpacePath"/>
                <isset property="db.oracle.tableSpaceName"/>
            </and>                
            <then>
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- DROP TABLESPACE identityiq_ts INCLUDING CONTENTS;"
                    value="DROP TABLESPACE ${db.oracle.tableSpaceName} INCLUDING CONTENTS AND DATAFILES;"
                />                
            </then>
        </if>

        <!-- For Oracle, if we are going to create the DB user, we should uncomment the line that drops them, and put in the right name-->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
                <isset property="db.oracle.createUser"/>
                <equals arg1="${db.oracle.createUser}" arg2="true"/>
                <isset property="db.name"/>
                <isset property="db.userPassword"/>
                <isset property="db.oracle.tableSpaceName"/>
            </and>                
            <then>
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- DROP USER identityiq CASCADE;"
                    value="DROP USER ${db.name} CASCADE;"
                />                
            </then>
        </if>

        <!-- regardless of the options, Oracle needs to have this line removed. -->
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
            </and>                
            <then>                
                <replace 
                    file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                    token="-- HOST rm /usr/local/oradata/identityiq.dbf"
                    value=""
                />                                              
            </then>
        </if>
        <if>
            <and>
                <isset property="db.type"/>
                <equals arg1="${db.type}" arg2="oracle"/>
                <isset property="db.oracle.useFastDropScript"/>
                <equals arg1="${db.oracle.useFastDropScript}" arg2="true"/>
                <isset property="db.name"/>                
                <isset property="db.oracle.tableSpaceName"/>
            </and> 
            <then>
                <concat destfile="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-ssb-fast.sql" append="false">drop user ${db.name} cascade;
</concat>
                <concat destfile="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-ssb-fast.sql" append="true">drop tablespace ${db.oracle.tableSpaceName} including contents and datafiles;
</concat>
                <iiq.sql sql.file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-ssb-fast.sql"/>
            </then>
            <else>
                <!-- Each DB has different syntax for removing the user and db-->
                <!-- mysql section -->
                <if>                    
                    <and>
                        <isset property="db.type"/>
                        <equals arg1="${db.type}" arg2="mysql"/>
                    </and>
                    <then>
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="USE identityiq"
                            value="USE ${db.name}"
                        /> 
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="user='identityiq'"
                            value="user='${db.userName}'"
                        /> 
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="EXISTS identityiq;"
                            value="EXISTS ${db.name};"
                        />                                               
                    </then>                                        
                </if>
                <!-- end mysql section -->

                <!-- sqlserver section -->
                <if>                    
                    <and>
                        <isset property="db.type"/>
                        <equals arg1="${db.type}" arg2="sqlserver"/>
                    </and>
                    <then>                        
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="USE identityiq"
                            value="USE ${db.name}"
                        /> 
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="drop database identityiq"
                            value="drop database ${db.name}"
                        />
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="sp_droplogin identityiq"
                            value="sp_droplogin ${db.sqlserver.loginName}"
                        />                                              
                    </then>                                        
                </if>
                <!-- end sqlserver section -->
                <!-- sqlserver section -->
                <if>                    
                    <and>
                        <isset property="db.type"/>
                        <equals arg1="${db.type}" arg2="db2"/>
                    </and>
                    <then>
                        <!-- connect to the db -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="CONNECT TO IIQ;"
                            value="CONNECT TO ${db.db2.databaseName};"
                        />
                        <!-- drop the tablespace -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="DROP TABLESPACE identityiq_ts;"
                            value="DROP TABLESPACE ${db.db2.tableSpaceName};"
                        />
                        <!-- drop the bufferpool -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="DROP BUFFERPOOL identityiq_bp;"
                            value="DROP BUFFERPOOL ${db.db2.bufferpool};"
                        />
                        <!-- drop the schema -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="DROP SCHEMA identityiq RESTRICT;"
                            value="DROP SCHEMA ${db.userName} RESTRICT;"
                        />
                        <!-- disconnect -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="Disconnect iiq;"
                            value="Disconnect ${db.db2.databaseName};"
                        />
                        <!-- drop the db -->
                        <replace 
                            file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"
                            token="DROP DATABASE iiq;"
                            value="DROP DATABASE ${db.db2.databaseName};"
                        />
                    </then>
                </if>
                <!-- end db2 section -->

                <!-- fix to properly substitute in the right schema name in the drop script -->
                <replace file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced" casesensitive="false"
                         token="identityiq." value="${db.name}."/>
                <iiq.sql sql.file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}.tokenReplaced"/>
            </else>
        </if>
        <!--<iiq.sql sql.file="${build.iiqBinaryExtract}/WEB-INF/database/drop_identityiq_tables-${IIQVersion}.${db.type}"/>-->
    </target>

    <target name="importcycle" depends="main,dist,import-custom,cycle" description="imports all customizations (XML,classes, static web content) and cycles your app server">

    </target>

    <target name="importjava" depends="main,dist,cycle" description="imports some customizations (classes, static web content) and cycles your app server">

    </target>

    <target name="importdynamic" depends="main,dist,import-custom" description="imports dynamic content that does not require a cycle, (XML static web content etc)">

    </target>

    <target name="concurd" description="Takes a sql query that returns a list of SailPointObject IDs, number of threads
     to spawn and deletes the IDs concurrently">

    </target>



    <target name="cycle" depends="init-properties" description="requires the application.server.start and stop properties to be set. Cycles app server">
        <!-- stop the server -->
        <if>
            <http url="http://${application.server.host}:${application.server.port}/${iiq.path}"/>
            <then>
                <iiq.start.stop action="stop"/>
                <waitfor>
                    <not>
                        <socket server="${application.server.host}" port="${application.server.port}"/>
                    </not>
                </waitfor>
                <iiq.start.stop action="start"/>
            </then>
            <else>
                <iiq.start.stop action="start"/>
            </else>
        </if>
    </target>
    
    <target name='exportSingleObject' depends="init-properties">
        <mkdir dir="${build}/export/"/>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="${build}/export/sailpoint.dtd">
            <arg line="sailpoint.tools.xml.DTDGenerator"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <mkdir dir="${build}/export/${objectType}/"/>
        <copy file="${build}/export/sailpoint.dtd" tofile="${build}/export/${objectType}/sailpoint.dtd"/>
        <echo message="Exporting ${objectName} of type ${objectType}"/>     
        <var name="consoleCommand" value='console iiqBeans -f ${build}/export/${objectType}/consoleCommandFile.txt'/>
        <propertyregex property="objectName"
                         input="${objectName}"
                         override="true"
                         regexp='"'
                         replace="" global="true" />
                 <propertyregex property="objectName"
                         input="${objectName}"
                         override="true"
                         regexp='comma'
                         replace="," global="true" />
        <var name='consolePredicate' value='get ${objectType} &quot;${objectName}&quot;'/>
        <echo message='Console Command is: ${consoleCommand} Console Predicate is: ${consolePredicate}'/>
        <echo message='${consolePredicate}' file='${build}/export/${objectType}/consoleCommandFile.txt'/>
        <propertyregex property="objectName"
                       input="${objectName}"
                       override="true"
                       regexp ="[\s/]"
                       replace="_" global="true" />
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="${build}/export/${objectType}/${objectType}-${objectName}.xml">
            <arg line="${consoleCommand}"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <delete file='${build}/export/${objectType}/consoleCommandFile.txt'/>
        <antcall target="cleanExportFiles"/>
    </target>
    
    <target name="createExportFile" depends="init-properties">
        <replaceregexp file="scripts/Rule-OutputCustomObjectFile.xml" match="%%INSTALL_DATE%%" replace="${installDate}" flags="g" />
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true">
            <arg line="console iiqBeans -c &quot;import scripts/Rule-OutputCustomObjectFile.xml&quot;"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="scripts/objectsToExport.properties">
            <arg line="console iiqBeans -c &quot;rule OutputCustomObjectFile&quot;"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>
    
    <!--                                                            -->
    <!-- Target: export                      -->
    <!-- export objects from the repository       -->
    <target name="exportObjectsAfterInstallDate" depends="init-properties,createExportFile">
        <property file="scripts/objectsToExport.properties"/>
        <echo message="objectType=${ObjectTypes}"/>
        <echo message="Generating objects from repository ..."/>
        <mkdir dir="${build}/export/"/>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="${build}/export/sailpoint.dtd">
            <arg line="sailpoint.tools.xml.DTDGenerator"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <foreach list="${ObjectTypes}" param="objectType" target="objectFileGenerator"/>
        <antcall target="cleanExportFiles"/>
    </target>
    
    <!--                                                            -->
    <!-- Target: export                      -->
    <!-- export objects from the repository       -->
    <target name="export" depends="init-properties">
        <property file="scripts/objectsToExport.properties"/>
        <echo message="objectType=${ObjectTypes}"/>
        <echo message="Generating objects from repository ..."/>
        <mkdir dir="${build}/export/"/>
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="${build}/export/sailpoint.dtd">
            <arg line="sailpoint.tools.xml.DTDGenerator"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <foreach list="${ObjectTypes}" param="objectType" target="objectFileGenerator"/>
        <antcall target="cleanExportFiles"/>
    </target>

     <target name="cleanExportFiles" depends="init-properties">
        <condition property="rulesPresent"> 
             <available file="${build}/export/Rule" type="dir"/> 
        </condition>
        <replaceregexp flags="g">
            <regexp pattern="\s(id|created|modified)=[&quot;']\w+[&quot;']"/>
            <substitution expression=""/>
            <fileset dir="${build}/export/">
                <include name="**/*.xml"/>
                <exclude name="**/${init-file}"/>
            </fileset>
        </replaceregexp>
        <antcall target="cleanRuleFiles"/>
     </target>
     
     <target name="cleanRuleFiles" depends="init-properties" if="rulesPresent">
         <replaceregexp flags="g">
             <regexp pattern="(&lt;Source&gt;)"/>
             <substitution expression="&lt;Source&gt;&lt;![CDATA["/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
         </replaceregexp>
         <replaceregexp flags="g">
             <regexp pattern="(&lt;/Source&gt;)"/>
             <substitution expression="\]\]&gt;&lt;/Source&gt;"/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
         </replaceregexp>
         <replaceregexp flags="g">
             <regexp pattern="(&amp;amp;)"/>
             <substitution expression="&amp;"/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
         </replaceregexp>
         <replaceregexp flags="g">
             <regexp pattern="(&amp;lt;)"/>
             <substitution expression="&lt;"/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
         </replaceregexp>
         <replaceregexp flags="g">
             <regexp pattern="(&amp;gt;)"/>
             <substitution expression="&gt;"/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
         </replaceregexp>
         <replaceregexp flags="g">
             <regexp pattern="(&amp;amp;&amp;amp;)"/>
             <substitution expression="&amp;&amp;"/>
             <fileset dir="${build}/export/Rule">
                 <include name="**/*.xml"/>
                 <exclude name="**/${init-file}"/>
             </fileset>
        </replaceregexp>
     </target>

    <target name="objectFileGenerator" depends="init-properties">
        <property file="scripts/objectsToExport.properties"/>
        <propertycopy name="objectNames" from="${objectType}"/>
        <mkdir dir="${build}/export/${objectType}/"/>
        <copy file="${build}/export/sailpoint.dtd" tofile="${build}/export/${objectType}/sailpoint.dtd"/>
        <foreach list="${objectNames}" param="objectName" inheritrefs="true" target="createObjectFile"/>
    </target>
    
    <target name="createObjectFile" depends="init-properties">
        <echo message="Exporting ${objectName} of type ${objectType}"/>     
        <var name="consoleCommand" value='console iiqBeans -f ${build}/export/${objectType}/consoleCommandFile.txt'/>
        <propertyregex property="objectName"
                         input="${objectName}"
                         override="true"
                         regexp='"'
                         replace="" global="true" />
        <propertyregex property="objectName"
                         input="${objectName}"
                         override="true"
                         regexp='comma'
                         replace="," global="true" />
        <var name='consolePredicate' value='get ${objectType} &quot;${objectName}&quot;'/>
        <echo message='Console Command is: ${consoleCommand} Console Predicate is: ${consolePredicate}'/>
        <echo message='${consolePredicate}' file='${build}/export/${objectType}/consoleCommandFile.txt'/>
        <propertyregex property="objectName"
                       input="${objectName}"
                       override="true"
                       regexp="[\s/]"
                       replace="_" global="true" />
        <java classname="sailpoint.launch.Launcher" fork="true" failonerror="true" output="${build}/export/${objectType}/${objectType}-${objectName}.xml">
            <arg line="${consoleCommand}"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
        <delete file='${build}/export/${objectType}/consoleCommandFile.txt'/>
    </target>

    <!--                                                            -->
    <!-- Target: importManagedAttributes                            -->
    <!-- Import managedAttributes into the repository                  -->
    <!--                                                            -->
    <target name="importManagedAttributes" depends="init-properties">
        <foreach list="${managedAttributeApplications}" param="application" target="importSingleAttributeFile"/>
    </target>
    
    <target name="importSingleAttributeFile">
        <echo message="Importing entitlements into the repository for ${application}..."/>
        <propertycopy name="entitlementFile" from="${application}"/>
        <java classname="sailpoint.launch.Launcher" fork="true">
            <arg line="console iiqBeans -c &quot;importExplanations ${application} default ${entitlementLocation}/${entitlementFile}&quot;"/>
            <classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>
    
    <target name="encryptString" depends="init-properties" description="Returns the encrypted version of the passed in string. Use '-DstringToEncrypt=yourString' on the command line.">
    	<echo message="Encrypting string ${stringToEncrypt}"/>
		<java classname="sailpoint.launch.Launcher" fork="true">
			<arg line="console iiqBeans -c &quot;encrypt ${stringToEncrypt}&quot;"/>
			<classpath>
                <pathelement path="${IIQHome}/WEB-INF/classes"/>
                <pathelement location="${IIQHome}/WEB-INF/lib/identityiq.jar"/>
            </classpath>
        </java>
    </target>


</project>