<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<!-- *******************************************************************************************
	TRIGGER OBJECT
 *******************************************************************************************-->
	 <IdentityTrigger handler="sailpoint.api.WorkflowTriggerHandler" 
		name="SP LCE Leaver Trigger" type="Rule" disabled="%%SP_LEAVER_IS_DISABLED%%">
	  <Owner>
	    <Reference class="sailpoint.object.Identity" name="spadmin"/>
	  </Owner>
	  <HandlerParameters>
	    <Attributes>
	      <Map>
	        <entry key="workflow" value="SP LCE Leaver WF"/>
	      </Map>
	    </Attributes>
	  </HandlerParameters>
	  <TriggerRule>
	    <Reference class="sailpoint.object.Rule" name="SP LCE Leaver Trigger Rule"/>
	  </TriggerRule>
	</IdentityTrigger>
 <!-- *******************************************************************************************
	TRIGGER RULE
 *******************************************************************************************-->
 	<Rule language="beanshell" name="SP LCE Leaver Trigger Rule" type="IdentityTrigger">
	  <Signature returnType="boolean">
	    <Inputs>
	      <Argument name="log">
	        <Description>
	          The log object associated with the SailPointContext.
	        </Description>
	      </Argument>
	      <Argument name="context">
	        <Description>
	          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
	        </Description>
	      </Argument>
	      <Argument name="previousIdentity">
	        <Description>
	          The identity before the refresh/aggregation (this will be null when an
	          identity is created).
	        </Description>
	      </Argument>
	      <Argument name="newIdentity">
	        <Description>
	          The identity after the refresh/aggregation (this will be null when an
	          identity is deleted).
	        </Description>
	      </Argument>
	    </Inputs>
	    <Returns>
	      <Argument name="result">
	        <Description>
	          A boolean describing the result of the rule.
	        </Description>
	      </Argument>
	    </Returns>
	  </Signature>
	  <ReferencedRules>
		    <Reference class="sailpoint.object.Rule" name="SP Leaver Rules Library"/>
	   </ReferencedRules>
	  <Source>
	  	return isTriggerLeaverRule(context, previousIdentity, newIdentity);
	  </Source>
	</Rule>
 <!-- *******************************************************************************************
	WORKFLOW
 *******************************************************************************************-->
 	<Workflow explicitTransitions="true"  name="SP LCE Leaver WF" type="IdentityLifecycle">
		<Description>
		
		This is the deployment framework's standard LCE Leaver WF 
		</Description>
		
	<!-- **************************************************************************
		STANDARD INPUT VARIABLES
	 **************************************************************************-->  
	  <Variable input="true" name="trigger">
	    <Description>The IdentityTrigger</Description>
	  </Variable>
	  <Variable input="true" name="event">
	    <Description>The IdentityChangeEvent</Description>
	  </Variable>
	  <Variable initializer="string:%%SP_LEAVER_WF_TRACE_ENABLED%%" name="trace">
	    <Description>
	      Used for debugging this workflow and when set to true trace
	      will be sent to stdout.
	    </Description>
	  </Variable>
	  <Variable input="true" name="identityName">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable name="flow" initializer="string:SSF Leaver">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable name="source" initializer="string:LCM">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName">
	    <Description>
	      The displayName of the identity being updated.
	      Query for this using a projection query and fall back to the name.
	    </Description>
	  </Variable>
	  
	<!-- **************************************************************************
		EMAIL SETUP VARIABLES
	 **************************************************************************-->
	  <Variable name="successTo" initializer="script:getProvSuccessEmailToRule(context,workflow)" />
	  <Variable name="failureTo" initializer="script:getProvFailureEmailToRule(context,workflow)" />
	  <Variable name="successTemplate" initializer="script:getProvSuccessEmailTemplateRule(context,workflow)" />
	  <Variable name="failureTemplate" initializer="script:getProvFailureEmailTemplateRule(context,workflow)" />
	  <Variable name="approvedTo" initializer="script:getApprovedEmailToRule(context,workflow)" />
	  <Variable name="rejectedTo" initializer="script:getRejectedEmailToRule(context,workflow)" />
	  <Variable name="approvedTemplate" initializer="script:getApprovedEmailTemplateRule(context,workflow)" />
	  <Variable name="rejectedTemplate" initializer="script:getRejectedEmailToRule(context,workflow)" />	
	  <Variable name="updateStandardPostProvEmails" initializer="%%SP_LEAVER_SEND_APPROVED_EMAILS%%" />	
	  <Variable name="updateStandardPostApproveEmails" initializer="%%SP_LEAVER_SEND_POST_PROVISION_EMAILS%%" />
	  
	<!-- **************************************************************************
		VARIABLES USED DURING PROCESSING
	 **************************************************************************-->
	  <Variable editable="true" name="requestType">
	    <Description>The Decider determining the Use Case</Description>
	  </Variable>
	  <Variable name="plan" />
	  <Variable name="project" />
      <Variable name="monitorId" />
	  
	  <Variable name="emailArgList">
	  	<Description>
	  		List of hash maps of all necessary emails that need to be sent out. 
	  	</Description>
	  </Variable>
	  
	  <Variable name="spExtAttrs" />
	  <Variable name="identityModel" />
	  
	<!-- **************************************************************************-->
	  <RuleLibraries>
	    <Reference class="sailpoint.object.Rule"  name="SP Provisioning Rules Library"/>
	    <Reference class="sailpoint.object.Rule"  name="SP Leaver Rules Library"/>
		<Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
	    <Reference class="sailpoint.object.Rule"  name="%%SP_LEAVER_RULES_OBJECT_NAME%%"/>
	  </RuleLibraries>
	  <Step icon="Start" monitored="true" name="Start" posX="2" posY="135">
	    <Transition to="Get Request Type"/>
	  </Step>
	  <Step monitored="true" name="Get Request Type" resultVariable="requestType">
	    <Script>
	      <Source>
	      	return getRequestTypeRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Before Plan" />
	  </Step>
	  <Step monitored="true" name="Before Plan" >
	    <Script>
	      <Source>
	      	beforePlanRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Build Plan" />
	  </Step>
	  <Step name="Build Plan" resultVariable="plan">
	  	<Script>
	  		<Source>
	  			import sailpoint.object.*;
	  			import java.util.*;
	  			ProvisioningPlan plan = getDynamicLeaverPlan(context, identityName);
	  			return plan;
	  		</Source>
	  	</Script>
	  	<Transition to="No Request Failure" when="plan == null || plan.getAccountRequests() == null || plan.getAccountRequests().size() &lt; 1"/>
	  	<Transition to="Before Provision"/>
	  </Step>
	  <Step monitored="true" name="Before Provision" >
	    <Script>
	      <Source>
	      	beforeProvisionRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Process Plan" />
	  </Step>
	  <Step icon="Task" name="Process Plan">
	    <Arg name="fallbackApprover" value="spadmin"/>
	    <Arg name="flow" value="ref:flow"/>
	    <Arg name="identityName" value="ref:identityName"/>
	    <Arg name="identityModel" value="ref:identityModel"/>
	    <Arg name="spExtAttrs" value="ref:spExtAttrs"/>
	    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
	    <Arg name="launcher" value="ref:launcher"/>
	    <Arg name="plan" value="ref:plan"/>
	    <Arg name="trace" value="ref:trace"/>
	    <Arg name="emailArgList" value="ref:emailArgList"/>
	    <Arg name="requestType" value="ref:requestType" />
	    <Arg name="requestor" value="ref:requestor" />
	    <Arg name="successTo" value="ref:successTo" />
	    <Arg name="failureTo" value="ref:failureTo" />
	    <Arg name="successTemplate" value="ref:successTemplate" />
	    <Arg name="failureTemplate" value="ref:failureTemplate" />
	    <Arg name="approvedTo" value="ref:successTo" />
	    <Arg name="rejectedTo" value="ref:failureTo" />
	    <Arg name="approvedTemplate" value="ref:approvedTemplate" />
	    <Arg name="rejectedTemplate" value="ref:rejectedTemplate" />
	    <Arg name="updateStandardPostProvEmails" value="ref:updateStandardPostProvEmails" />
	    <Arg name="updateStandardPostApproveEmails" value="ref:updateStandardPostApproveEmails" />
	    <Return name="emailArgList" to="emailArgList"/>
	    <Return name="approvalSet" to="approvalSet"/>
	    <Return name="project" to="project"/>
	    <Return name="identityModel" to="identityModel"/>
	    <Return name="spExtAttrs" to="spExtAttrs"/>
	    <WorkflowRef>
	      <Reference class="sailpoint.object.Workflow" name="SP Provision Processor Sub"/>
	    </WorkflowRef>
	    <Transition to="After Provision" />
	  </Step>
	  
	  <Step monitored="true" name="After Provision" >
	    <Script>
	      <Source>
	      	afterProvisionRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Mark Inactive" />
	  </Step>
	  
	  <Step name="No Request Failure">
	  	<Script>
	  		<Source>
	  			System.out.println("In No Request Failure Step");
	  			//TODO:  CAN ADD LOGIC TO APPEND EMAILS.  
	  			// SHOULD BE IN RULE LIBRARY.  ADDING HERE FOR DISPLAY PURPOSES
	  		
	  		</Source>
	  	</Script>
	  	<Transition to="Send Emails" />
	  </Step>
	  
	  <Step monitored="true" name="Mark Inactive" >
	    <Script>
	      <Source>
	      	markInactive(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Send Emails" />
	  </Step>
	  
	  <Step name="Send Emails">
	  	<Arg name="emailArgList" value="ref:emailArgList"/>
	    <Description>
	      Call the standard subprocess that will handle the built-in
	      owner, manager and security officer approval schemes.
	    </Description>
	    <WorkflowRef>
	      <Reference class="sailpoint.object.Workflow" name="SP Dynamic Send Emails Sub"/>
	    </WorkflowRef>
	    <Transition to="Stop"/>
	  </Step>
	  
	  <Step icon="Stop" monitored="true" name="Stop" posX="960" posY="17"/>
	</Workflow>
</sailpoint>