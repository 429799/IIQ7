<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="SP Mover Rules Library" language="beanshell">
	<ReferencedRules>
	    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
	    <Reference class="sailpoint.object.Rule" name="SP Attr Synch Rules Library"/>
    </ReferencedRules>
	<Source>
	<![CDATA[
	import sailpoint.api.SailPointFactory;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.Provisioner;
	import sailpoint.object.*;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
    import sailpoint.object.ProvisioningPlan.Operation; 
	import sailpoint.tools.Util;
    import sailpoint.tools.Message;
    import sailpoint.tools.GeneralException;
    import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.DriverManager;
    import java.sql.Timestamp;
	import java.util.*;
	import java.text.*;
	import javax.naming.Context;
	import javax.naming.InitialContext;
	import javax.sql.DataSource;
	import sailpoint.api.PasswordGenerator;
	import sailpoint.api.Matchmaker;
	
	
    import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;

	private static Log movlogger = LogFactory.getLog("rule.SP.Mover.RulesLibrary");
	
	public static boolean isTriggerMoverRule(SailPointContext context, Identity previousIdentity, Identity newIdentity){
		movlogger.trace("Enter isTriggerMoverRule");
		boolean flag = false;
		
		String currStatus = "";

        if(newIdentity == null || newIdentity == void){
        	movlogger.warn("New identity objects are null");
        	return flag;
        }
        
        if(previousIdentity == null || previousIdentity == void){
        	movlogger.warn("Prev identity objects are null");
        	return flag;
        }
        
        String identityName = newIdentity.getName();
        
        Custom mappingObj = getMoverMappingObject(context);
		
		if (mappingObj != null){
		
			String triggerType = mappingObj.get("Trigger Type");
			
			movlogger.debug("Have the trigger type: " + triggerType);
			if ("Custom Rule".equalsIgnoreCase(triggerType)){
				movlogger.trace("Determine if trigger using custom rule.  Getting the rule name ");
				String customRule = mappingObj.get("Trigger Custom Rule");
				
				movlogger.trace("Determine if trigger using custom rule: " + customRule);
					
				HashMap params = new HashMap();
				
				//params.put("context", context);
				params.put("previousIdentity", previousIdentity);
				params.put("newIdentity", newIdentity);
				
				movlogger.trace("Run the rule");
				flag = runFrameworkRule(context, customRule, params);
			} else if("Selector".equalsIgnoreCase(triggerType)){
				movlogger.trace("Determine if trigger using a selector");
				Matchmaker matchMaker = new Matchmaker(context);
				IdentitySelector idSelector = mappingObj.get("Trigger Field Selector");
				
				flag = matchMaker.isMatch(idSelector, newIdentity);
			} else if("Compare Links".equalsIgnoreCase(triggerType)){
				movlogger.trace("Determine if trigger by comparing links");
				
				flag = isNewLinkChanged(previousIdentity, newIdentity, mappingObj);
			} else {
				movlogger.warn("Unknown trigger type: " + triggerType);
				
			}
		}
		
		movlogger.trace("Exit isTriggerMoverRule: " + flag);
		return flag;
	}
	
	public ProvisioningPlan getDynamicMoverPlan(SailPointContext context, String identityName){
		logger.trace("Enter getDynamicMoverPlan");
		
		Identity identity = context.getObjectByName(Identity.class, identityName);
		
		ProvisioningPlan plan = getDynamicMoverPlan (context, identity);
		
		return plan;
	}
	
	public ProvisioningPlan getDynamicMoverPlan(SailPointContext context, Identity identity){
		logger.trace("Enter getDynamicMoverPlan");
		
		ProvisioningPlan plan = new ProvisioningPlan();
		plan.setIdentity(identity);	
		
		Custom mappingObj = getMoverMappingObject(context);
		
		if (mappingObj != null){
			logger.trace("Get the con types");
			List conTypes = mappingObj.get("Plan Construction Types");
			
			if (conTypes.contains("Dynamic Roles")){
				logger.debug("Dynamically assign roles");
				plan = getDynamicRolesPlan(context, identity);
			}
			
			if (conTypes.contains("Attribute Synch")){
				logger.debug("Dynamically build target attribute updates");
				
				List links = identity.getLinks();
				AccountRequest.Operation acctOp = AccountRequest.Operation.Modify;
				
				
				for (Link link : links){
					app = link.getApplication();
					appName = app.getName();
					nativeId = link.getNativeIdentity();
					instance = link.getInstance();
					
					movlogger.debug("Get attr requests for " + nativeId + ":" + instance + " on " + appName);
					List attrReqs = getUpdateAttributeRequests(context, identity, link);
					
					movlogger.trace("Have attrReqs: " + attrReqs);
					if (attrReqs != null && !attrReqs.isEmpty()){
						
						movlogger.debug("Attr reqs not null.  Build account request");
						
						AccountRequest acctReq = new AccountRequest(acctOp, appName, instance, nativeId);
						acctReq.addAll(attrReqs);
						
						movlogger.debug("Add account request: " + acctReq.toXml());
						plan.add(acctReq);
						
					}
				}
			}
			
			if (conTypes.contains("Custom Rule")){
				String customRule = mappingObj.get("Plan Construction Custom Rule");
				
				HashMap params = new HashMap();
				
				params.put("context", context);
				params.put("identity", identity);
				params.put("plan", plan);
				
				try {
					movlogger.trace("Run the rule");
					plan = runFrameworkRule(context, customRule, params);
				} catch (Exception re){
					movlogger.error(" EXCEPTION RUNNING RULE/SCRIPT: " + re.toString());
					return null;
				}
				
			} 
			
			
		}
		
		plan.setComments("Adding Mover Access");
		
		movlogger.trace("Set plan identity " + identity);
		plan.setIdentity(identity);
		
		movlogger.trace("Exit getDynamicMoverPlan: " + plan.toXml());
		return plan;
	}
	
	public static boolean launchMoverCert(SailPointContext context, 
		String identityName, IdentityChangeEvent event, String launcher){
		movlogger.trace("Enter launchMoverCert");
		boolean launched = false; 
		
		Custom mappingObj = getMoverMappingObject(context);
		
		if (mappingObj == null){
			logger.warn("No mapping object found");
			return launched;
		}
			
		String lc = mappingObj.get("Launch Manager Cert");
		movlogger.trace("Have Launch Manager Cert: " + lc + " " + lc.getClass().getName());
		
		boolean doLaunch = Boolean.getBoolean(lc);
		movlogger.trace("doLaunch: " + doLaunch);
		
		if (!doLaunch && !"true".equalsIgnoreCase(lc)){
			movlogger.info("Not launching the cert as it is currently disabled");
			return launched;
		}
		
		movlogger.debug("Begin setting up the identity info for the Mover Cert");
		
		Identity newIdentity = context.getObjectByName(Identity.class, identityName);
		Identity oldIdentity = (Identity)event.getOldObject();
		
		
		movlogger.trace("Building certification for " + identityName);
		
		if (newIdentity == null || oldIdentity == null){
			movlogger.warn("No identity");
			return launched;
		}
		
		movlogger.trace("Set the certifier as the manager");
		Identity certifier = newIdentity.getManager();
		
		try {
			
			QueryOptions qo = new QueryOptions();
			
			movlogger.trace("Get identity id");
			String identityId = newIdentity.getId();
			
			qo.addFilter(Filter.eq("CertificationEntity.targetId", identityId));
			
			movlogger.trace("Check for existing certs with query: " + qo);
			Iterator certs = context.search(CertificationEntity.class, qo);
			
			if (certs == null || !certs.hasNext()){
				movlogger.trace("Call launch cert");
				launchCertification(context, newIdentity, launcher, certifier);
				launched = true;
			} else {
				movlogger.warn("Already existing cert for identity: " + identityName);
			}
			
		
		} catch (Exception e){
			movlogger.error("Failure to launch cert: " + e.toString());
		}
		
		movlogger.trace("Exit launchMoverCert");
		return launched;
	}
	
	
	public static void launchCertification(SailPointContext context, Identity identity, String launcher,
		Identity certifier) throws Exception{
		movlogger.trace("Enter launchCertification");
		
		String r = launcher;
		String identityName = identity.getName();
		
		if (r == null || r.equalsIgnoreCase("Scheduler")){
			r = "spadmin";
		}
		
		Identity requestor = context.getObject(Identity.class, r);	 
		movlogger.trace("Change requested by " + requestor.getName()); 
		
		movlogger.trace("Add identity to list");
		List identities = new ArrayList();
		identities.add(identity.getName());

		movlogger.trace("Set the cert group owner");
		Identity certGroupOwner = context.getObjectByName(Identity.class, "spadmin");

		movlogger.trace("Create scheduler & schedule set to run now");
		CertificationScheduler scheduler = new CertificationScheduler(context);

		CertificationSchedule schedule = scheduler.initializeScheduleBean(requestor, Certification.Type.Identity);
		schedule.setRunNow(true);

		movlogger.trace("Configure cert def");
		CertificationDefinition definition = schedule.getDefinition();
		definition.setCertifierSelectionType(CertificationDefinition.CertifierSelectionType.Manual);
		definition.setProcessRevokesImmediately(true);
		
		String certName = "Mover Manager Certification for " + identityName + " - " + identity.getDisplayName();
		
		definition.setNameTemplate(certName + ": assigned to " + certifier.getDisplayName());
		definition.setShortNameTemplate(certName);
		definition.setName(certName + " [" + new Date().toString() + "]");
		definition.setIdentitiesToCertify(identities);
		definition.setCertifierName(certifier.getName());
		definition.setCertificationOwner(certGroupOwner);
		definition.setCertificationNameTemplate(certName);

		movlogger.trace("Schedule task to run, passing in schedule (which has certficiaton defintion attached)");
		TaskSchedule taskSchedule = scheduler.saveSchedule(schedule, false);
		
		movlogger.trace("Exit launchCertification");
	}
	
	
	public static Custom getMoverMappingObject(SailPointContext context){
		movlogger.trace("Enter getMoverMappingObject");
		
		Custom mappingObj = context.getObjectByName(Custom.class, "%%SP_MOVER_CUSTOM_OBJECT_NAME%%");
		movlogger.trace("Exit getMoverMappingObject: " + mappingObj);
		return mappingObj;
	}
	
	]]>
	</Source>
</Rule>