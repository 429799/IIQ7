<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<!-- *******************************************************************************************
	SCOPING
 *******************************************************************************************-->
	<SPRight displayName="SP LCM Terminate Identity Right" name="SP_LCM_TerminateIdentity_SPRight" />
	
	<DynamicScope name="SP LCM Terminate Identity Scope">
		<Selector>
			<IdentitySelector>
				<MatchExpression>
					<MatchTerm name="rights" value="SP_LCM_TerminateIdentity_SPRight"/>
				</MatchExpression>
			</IdentitySelector>
		</Selector>
	</DynamicScope>
	
<!-- *******************************************************************************************
	Quick Link
 *******************************************************************************************-->

	<QuickLink action="workflow" category="%%SP_TERMINATE_IDENTITY_LINK_CATEGORY%%" 
		disabled="%%SP_TERMINATE_IDENTITY_IS_DISABLED%%" 
		icon="viewIdentity" messageKey="%%SP_TERMINATE_IDENTITY_LINK_MESSAGE_KEY%%"
		name="SP Terminate Identity" ordering="%%SP_TERMINATE_IDENTITY_LINK_ORDERING%%">
		<Attributes>
			<Map>
				<entry key="forceAllowOthers" value="true" />
				<entry key="hideAllowSelf" value="true" />
				<entry key="workflowName" value="SP LCM Terminate Identity WF"/>
			</Map>
		</Attributes>
		<DynamicScopes>
			<Reference class="sailpoint.object.DynamicScope" name="SP LCM Terminate Identity Scope" />
		</DynamicScopes>
	</QuickLink>
<!-- *******************************************************************************************
	WORKFLOW
 *******************************************************************************************-->
	<Workflow explicitTransitions="true"  name="SP LCM Terminate Identity WF" type="LCMProvisioning">
		<Description>
		
		This is the deployment framework's standard LCE Terminate Identity WF 
		</Description>
		
	<!-- **************************************************************************
		STANDARD INPUT VARIABLES
	 **************************************************************************-->  
	  <Variable initializer="string:%%SP_TERMINATE_IDENTITY_WF_TRACE_ENABLED%%" name="trace">
	    <Description>
	      Used for debugging this workflow and when set to true trace
	      will be sent to stdout.
	    </Description>
	  </Variable>
	  <Variable input="true" name="identityName">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable name="flow" initializer="string:SSF Terminate Identity">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable name="source" initializer="string:LCM">
	    <Description>The name of the identity.</Description>
	  </Variable>
	  <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName">
	    <Description>
	      The displayName of the identity being updated.
	      Query for this using a projection query and fall back to the name.
	    </Description>
	  </Variable>
	  
	<!-- **************************************************************************
		EMAIL SETUP VARIABLES
	 **************************************************************************-->
	  <Variable name="successTo" initializer="script:getProvSuccessEmailToRule(context,workflow)" />
	  <Variable name="failureTo" initializer="script:getProvFailureEmailToRule(context,workflow)" />
	  <Variable name="successTemplate" initializer="script:getProvSuccessEmailTemplateRule(context,workflow)" />
	  <Variable name="failureTemplate" initializer="script:getProvFailureEmailTemplateRule(context,workflow)" />
	  <Variable name="approvedTo" initializer="script:getApprovedEmailToRule(context,workflow)" />
	  <Variable name="rejectedTo" initializer="script:getRejectedEmailToRule(context,workflow)" />
	  <Variable name="approvedTemplate" initializer="script:getApprovedEmailTemplateRule(context,workflow)" />
	  <Variable name="rejectedTemplate" initializer="script:getRejectedEmailToRule(context,workflow)" />	
	  <Variable name="updateStandardPostProvEmails" initializer="%%SP_TERMINATE_IDENTITY_SEND_APPROVED_EMAILS%%" />	
	  <Variable name="updateStandardPostApproveEmails" initializer="%%SP_TERMINATE_IDENTITY_SEND_POST_PROVISION_EMAILS%%" />
	  
	<!-- **************************************************************************
		VARIABLES USED DURING PROCESSING
	 **************************************************************************-->
	  <Variable editable="true" name="requestType">
	    <Description>The Decider determining the Use Case</Description>
	  </Variable>
	  <Variable name="plan" />
	  <Variable name="project" />
	  <Variable name="monitorId" />
	  <Variable name="entryForm" />
	  <Variable name="confirmForm" />
	  <Variable name="useEntryForm" />
	  
	  <Variable name="emailArgList">
	  	<Description>
	  		List of hash maps of all necessary emails that need to be sent out. 
	  	</Description>
	  </Variable>
	  
	  <Variable name="spExtAttrs" />
	  <Variable name="identityModel" />
	  
	<!-- **************************************************************************-->
	  <RuleLibraries>
	    <Reference class="sailpoint.object.Rule"  name="SP Provisioning Rules Library"/>
		<Reference class="sailpoint.object.Rule" name="SP Terminate Identity Rules Library"/>
	    <Reference class="sailpoint.object.Rule"  name="%%SP_TERMINATE_IDENTITY_RULES_OBJECT_NAME%%"/>
	  </RuleLibraries>
	  <Step icon="Start" monitored="true" name="Start" posX="2" posY="135">
	    <Transition to="Init Identity Model"/>
	  </Step>
	  <Step monitored="true" name="Init Identity Model" resultVariable="identityModel">
	    <Script>
	      <Source>
	      	return initIdentityModel(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Init Use Entry Form" />
	  </Step>
	  <Step monitored="true" name="Init Use Entry Form" resultVariable="useEntryForm">
	    <Script>
	      <Source>
	      	return initUseEntryForm(context, workflow);
	      </Source>
	    </Script>
	    <Transition to="Show Entry Form" when="script:useEntryForm" />
	    <Transition to="Show Confirm Form" />
	  </Step>
	  <Step name="Show Entry Form">
	  	<Approval mode="serial" owner="ref:launcher" send="identityModel" return="identityModel" >
			<Arg name="workItemType" value="Form" />
			<Arg name="workItemForm" value="ref:entryForm" />
			<Arg name="workItemDescription" value="Terminate Identity Entry Form" />
			<Arg name="workItemFormBasePath" value="identityModel"/>
		</Approval>
		<Transition to="end" when="!approved" />
		<Transition to="Show Confirm Form" />
	  </Step>
	  <Step name="Show Confirm Form">
	  	<Approval mode="serial" owner="ref:launcher" send="identityModel" return="identityModel" >
			<Arg name="workItemType" value="Form" />
			<Arg name="workItemForm" value="ref:confirmForm" />
			<Arg name="workItemDescription" value="Terminate Identity Confirmation Form" />
			<Arg name="workItemFormBasePath" value="identityModel"/>
		</Approval>
		<Transition to="end" when="!approved" />
		<Transition to="Get Request Type" />
	  </Step>
	  <Step monitored="true" name="Get Request Type" resultVariable="requestType">
	    <Script>
	      <Source>
	      	return getRequestTypeRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Before Plan" />
	  </Step>
	  <Step monitored="true" name="Before Plan" >
	    <Script>
	      <Source>
	      	beforePlanRule(context, workflow);
	      </Source>
	    </Script>
	    <Transition to="Build Plan" />
	  </Step>
	  <Step name="Build Plan" resultVariable="plan">
	  	<Script>
	  		<Source>
	  			import sailpoint.object.*;
	  			import java.util.*;
	  			ProvisioningPlan plan = getDynamicAttrSynchPlan(context, identityName, workflow);
	  			return plan;
	  		</Source>
	  	</Script>
	  	<Transition to="No Request Failure" when="plan == null || plan.getAccountRequests() == null || plan.getAccountRequests().size() &lt; 1"/>
	  	<Transition to="Before Provision"/>
	  </Step>
	  <Step monitored="true" name="Before Provision" >
	    <Script>
	      <Source>
	      	beforeProvisionRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Process Plan" />
	  </Step>
	  <Step icon="Task" name="Process Plan">
	    <Arg name="fallbackApprover" value="spadmin"/>
	    <Arg name="flow" value="ref:flow"/>
	    <Arg name="identityName" value="ref:identityName"/>
	    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
	    <Arg name="identityModel" value="ref:identityModel"/>
	    <Arg name="spExtAttrs" value="ref:spExtAttrs"/>
	    <Arg name="launcher" value="ref:launcher"/>
	    <Arg name="plan" value="ref:plan"/>
	    <Arg name="trace" value="ref:trace"/>
	    <Arg name="emailArgList" value="ref:emailArgList"/>
	    <Arg name="requestType" value="ref:requestType" />
	    <Arg name="requestor" value="ref:requestor" />
	    <Arg name="successTo" value="ref:successTo" />
	    <Arg name="failureTo" value="ref:failureTo" />
	    <Arg name="successTemplate" value="ref:successTemplate" />
	    <Arg name="failureTemplate" value="ref:failureTemplate" />
	    <Arg name="approvedTo" value="ref:successTo" />
	    <Arg name="rejectedTo" value="ref:failureTo" />
	    <Arg name="approvedTemplate" value="ref:approvedTemplate" />
	    <Arg name="rejectedTemplate" value="ref:rejectedTemplate" />
	    <Arg name="updateStandardPostProvEmails" value="ref:updateStandardPostProvEmails" />
	    <Arg name="updateStandardPostApproveEmails" value="ref:updateStandardPostApproveEmails" />
	    <Return name="emailArgList" to="emailArgList"/>
	    <Return name="approvalSet" to="approvalSet"/>
	    <Return name="project" to="project"/>
	    <Return name="identityModel" to="identityModel"/>
	    <Return name="spExtAttrs" to="spExtAttrs"/>
	    <WorkflowRef>
	      <Reference class="sailpoint.object.Workflow" name="SP Provision Processor Sub"/>
	    </WorkflowRef>
	    <Transition to="After Provision" />
	  </Step>
	  
	  <Step monitored="true" name="After Provision" >
	    <Script>
	      <Source>
	      	afterProvisionRule(context, workflow);
	      </Source>
	    </Script>
	     <Transition to="Send Emails" />
	  </Step>
	  
	  <Step name="No Request Failure">
	  	<Script>
	  		<Source>
	  			System.out.println("In No Request Failure Step");
	  			//TODO:  CAN ADD LOGIC TO APPEND EMAILS.  
	  			// SHOULD BE IN RULE LIBRARY.  ADDING HERE FOR DISPLAY PURPOSES
	  		
	  		</Source>
	  	</Script>
	  	<Transition to="Send Emails" />
	  </Step>
	  
	  <Step name="Send Emails">
	  	<Arg name="emailArgList" value="ref:emailArgList"/>
	    <Description>
	      Call the standard subprocess that will handle the built-in
	      owner, manager and security officer approval schemes.
	    </Description>
	    <WorkflowRef>
	      <Reference class="sailpoint.object.Workflow" name="SP Dynamic Send Emails Sub"/>
	    </WorkflowRef>
	    <Transition to="Stop"/>
	  </Step>
	  
	  <Step icon="Stop" monitored="true" name="Stop" posX="960" posY="17"/>
	</Workflow>
</sailpoint>