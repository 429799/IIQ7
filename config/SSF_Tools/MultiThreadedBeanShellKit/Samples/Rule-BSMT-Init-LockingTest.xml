<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
<Rule language="beanshell"  
          name="BSMT LockingTest Init Rule"       
          type="BuildMap" >
  <Description>Init Rule</Description>  
  <Source><![CDATA[
// Library inclusions for BeanShell.
import java.lang.*;
import sailpoint.api.*;
import sailpoint.object.*;

import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;
import org.apache.log4j.Level;

Logger log = Logger.getLogger("sailpoint.services.BeanShellMultiThreading.Init");
log.setLevel((Level) Level.DEBUG);  // TODO: Remove this in production rules.

// Sanity checking to make sure we were passed a valid shared state.
if ((void == sharedThreadState) || (null == sharedThreadState)) {
   log.error("Received a null or void sharedThreadState.");
   return;
}
if ( !(sharedThreadState instanceof ConcurrentHashMap) ) {
   log.error("Received a sharedThreadState that is not a ConcurrentHashMap.");
   return;
} 

// Add your logic here!
log.debug("Inside Initialization Rule");

String customName = "SP Locking Test Custom";
// String customName = "noSpacesCustom"; // Debugging to see if sapces matter.
String initUniqueId = "10000000"; // Start off at 10,000,000.
String numTestUpdates = "777";

// Let all the threads and the cleanup rule know how many objects we run,
// the initial unique ID, and the custom object name.
sharedThreadState.put("customName",     customName);
sharedThreadState.put("initUniqueId",   initUniqueId);
sharedThreadState.put("numTestUpdates", numTestUpdates);

Terminator termin = new Terminator(context);

// Delete any previous copies of the custom object.
Custom oldCustom = context.getObjectByName(Custom.class, customName);
if (null != oldCustom) {
   log.debug("Purging old custom object: " + oldCustom.getId());
   termin.deleteObject(oldCustom);  
}

Custom custom = new Custom();
custom.setName(customName);
custom.put("nextUniqueId", initUniqueId);  

context.saveObject(custom);
context.commitTransaction();
context.decache(custom);

log.debug("New custom object saved, initial unique id: " + initUniqueId);

return;
]]>
  </Source>
</Rule>
</sailpoint>